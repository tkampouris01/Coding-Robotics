// Created on Thu April 2 2020

int l_motor = 0;
int r_motor = 2;
int l_bump = 8;
int r_bump = 9;
int speed = 100;
int s_speed = 20;
int pause = 150;
int f_pause = 700;
int l_pause = 500;
int l_tophat = 5;
int r_tophat = 6;
int black = 500;
int f_sensor = 1;
int r_sensor = 2;
int target = 250;
int count = 0;

void forward(){                          	 	//robot moves forward 
	motor(l_motor, speed);                  	//left wheel rolls forward
	motor(r_motor, speed);                  	//right wheel rolls foward
}

void backward(){                          	 	//robot moves backward
	motor(l_motor, -speed);                  	//left wheel rolls backward
	motor(r_motor, -speed);                  	//right wheel rolls bakcward
}

void r_turn(){                        	   		//robot turns right
	motor(l_motor, speed);                  	//right wheel rolls forwards
	motor(r_motor, -s_speed);             		//right wheel rolls backwards at slower speed
}

void r_veer(){                        	   		//robot veers right
	motor(l_motor, speed);                  	//left wheel rolls forwards
	motor(r_motor, speed-25);             		//right wheel rolls forwards at slightly slower speed
}

void l_veer(){                        	   		//robot veers left
	motor(r_motor, speed);                  	//right wheel rolls forwards
	motor(l_motor, speed-15);             		//left wheel rolls forwards at slightly slower speed
}

void l_veer2(){                        	  		//robot veers left more drastically
	motor(r_motor, speed);                  	//right wheel rolls forwards
	motor(l_motor, 10);				//right rolls a lot slower	
}

void r_veer2(){                        	   		//robot veers right more drastically
	motor(l_motor, speed);                  	//left wheel rolls forwards
	motor(r_motor, 10);				//right rolls a lot slower
}

void l_turn(){                          	 	//robot turns left
	motor(r_motor, speed);                  	//right wheels rolls forwards 
	motor(l_motor, -speed);                 	//left wheel rolls backwards at same speed
}

void linefollow(){					//follow line function
	while(analog(f_sensor)>=150){			//while the distance sensor reads larger than 150, the loop is true
		forward();
   
    if(analog(r_tophat) >= black){			//if the right tophat sensor sees the black line,
     	l_veer2();					//robot sharply veers left
		printf("veer left 2\n");
		} 
    
    if(analog(r_tophat) <= black){			//if the right tophat sensor sees the white table,
    	r_veer2();					//robot sharply veers right
		printf("veer right 2\n");
		}
	}						//robot jumps out of the loop when the distance sensor sees a wall
}

void linefollow2(){
	while(analog(l_tophat)<=black){			//while the left tophat sensor sees white, the loop is true
		forward();
   
    if(analog(r_tophat) >= black){			//if the right tophat sensor sees the black line,
     	l_veer2();					//robot sharply veers left
		printf("veer left 2\n");
		} 
    
    if(analog(r_tophat) <= black){			//if the right tophat sensor sees the white table,
    	r_veer2();					//robot sharply veers right
		printf("veer right 2\n");
		}
	}						//robot jumps out of the loop when the left tophat sensor sees a black line
}

void wallfollow(){                    //wallfollow function
	while(count<=3){
		
	if(analog(r_sensor) >= target){			//if the right distance sensor reads more than 250,
		r_veer2();											//robot sharply veers left
		printf("veer right 2\n");
		} 
    
	if(analog(r_sensor) <= target){			//if the right distance sensor reads less than 250,
		l_veer2();										//robot sharply veers right
		printf("veer left 2\n");
		}
		
	if(analog(r_tophat)>500){           //when the right tophat sensor sees a black line,
			count++;                        //counter adds 1
			printf("anotha one\n");
			ao(); 
			forward();            //robot moves forward on an mlseep so the the counter does not activate twice form the same line
			msleep(pause);
		}
		
	if(count==3){                       //when the counter reaches 3, robot breaks out of the loop
			printf("3 Lines\n");
			break;
		}
	}
}

int main()
{
	
	wallfollow();               //it's all in the void function
	
	ao();                       //mission accomplished
	
	return 0;
}
